package com.evatar.blackjack.GameModels;

import com.evatar.blackjack.GameModels.Models.Card;
import com.evatar.blackjack.GameModels.Models.Hand;
import com.google.common.collect.ImmutableTable;


class Strategy {
    /**
     * Row key: dealer score, Column key: player score, Value: optimal decision
     */
    private final ImmutableTable<Integer, Integer, Decision> hardTable;

    /**
     * Row key: dealer score, Column key: player score, Value: optimal decision
     */
    private final ImmutableTable<Integer, Integer, Decision> softTable;

    /**
     * Row key: dealer score, Column key: value of split card, Value: optimal decision
     */
    private final ImmutableTable<Integer, Integer, Decision> splitTable;

    public Strategy() {

        // dealer visible score, player score, optimal decision
        hardTable = new ImmutableTable.Builder<Integer, Integer, Decision>()
                .put(2, 4, Decision.HIT)
                .put(3, 4, Decision.HIT)
                .put(4, 4, Decision.HIT)
                .put(5, 4, Decision.HIT)
                .put(6, 4, Decision.HIT)
                .put(7, 4, Decision.HIT)
                .put(8, 4, Decision.HIT)
                .put(9, 4, Decision.HIT)
                .put(10, 4, Decision.HIT)
                .put(11, 4, Decision.HIT)
                .put(2, 5, Decision.HIT)
                .put(3, 5, Decision.HIT)
                .put(4, 5, Decision.HIT)
                .put(5, 5, Decision.HIT)
                .put(6, 5, Decision.HIT)
                .put(7, 5, Decision.HIT)
                .put(8, 5, Decision.HIT)
                .put(9, 5, Decision.HIT)
                .put(10, 5, Decision.HIT)
                .put(11, 5, Decision.HIT)
                .put(2, 6, Decision.HIT)
                .put(3, 6, Decision.HIT)
                .put(4, 6, Decision.HIT)
                .put(5, 6, Decision.HIT)
                .put(6, 6, Decision.HIT)
                .put(7, 6, Decision.HIT)
                .put(8, 6, Decision.HIT)
                .put(9, 6, Decision.HIT)
                .put(10, 6, Decision.HIT)
                .put(11, 6, Decision.HIT)
                .put(2, 7, Decision.HIT)
                .put(3, 7, Decision.HIT)
                .put(4, 7, Decision.HIT)
                .put(5, 7, Decision.HIT)
                .put(6, 7, Decision.HIT)
                .put(7, 7, Decision.HIT)
                .put(8, 7, Decision.HIT)
                .put(9, 7, Decision.HIT)
                .put(10, 7, Decision.HIT)
                .put(11, 7, Decision.HIT)
                .put(2, 8, Decision.HIT)
                .put(3, 8, Decision.HIT)
                .put(4, 8, Decision.HIT)
                .put(5, 8, Decision.HIT)
                .put(6, 8, Decision.HIT)
                .put(7, 8, Decision.HIT)
                .put(8, 8, Decision.HIT)
                .put(9, 8, Decision.HIT)
                .put(10, 8, Decision.HIT)
                .put(11, 8, Decision.HIT)
                .put(2, 9, Decision.HIT)
                .put(3, 9, Decision.H_DOUBLE)
                .put(4, 9, Decision.H_DOUBLE)
                .put(5, 9, Decision.H_DOUBLE)
                .put(6, 9, Decision.H_DOUBLE)
                .put(7, 9, Decision.HIT)
                .put(8, 9, Decision.HIT)
                .put(9, 9, Decision.HIT)
                .put(10, 9, Decision.HIT)
                .put(11, 9, Decision.HIT)
                .put(2, 10, Decision.H_DOUBLE)
                .put(3, 10, Decision.H_DOUBLE)
                .put(4, 10, Decision.H_DOUBLE)
                .put(5, 10, Decision.H_DOUBLE)
                .put(6, 10, Decision.H_DOUBLE)
                .put(7, 10, Decision.H_DOUBLE)
                .put(8, 10, Decision.H_DOUBLE)
                .put(9, 10, Decision.H_DOUBLE)
                .put(10, 10, Decision.HIT)
                .put(11, 10, Decision.HIT)
                .put(2, 11, Decision.H_DOUBLE)
                .put(3, 11, Decision.H_DOUBLE)
                .put(4, 11, Decision.H_DOUBLE)
                .put(5, 11, Decision.H_DOUBLE)
                .put(6, 11, Decision.H_DOUBLE)
                .put(7, 11, Decision.H_DOUBLE)
                .put(8, 11, Decision.H_DOUBLE)
                .put(9, 11, Decision.H_DOUBLE)
                .put(10, 11, Decision.H_DOUBLE)
                .put(11, 11, Decision.HIT)
                .put(2, 12, Decision.HIT)
                .put(3, 12, Decision.HIT)
                .put(4, 12, Decision.STAY)
                .put(5, 12, Decision.STAY)
                .put(6, 12, Decision.STAY)
                .put(7, 12, Decision.HIT)
                .put(8, 12, Decision.HIT)
                .put(9, 12, Decision.HIT)
                .put(10, 12, Decision.HIT)
                .put(11, 12, Decision.HIT)
                .put(2, 13, Decision.STAY)
                .put(3, 13, Decision.STAY)
                .put(4, 13, Decision.STAY)
                .put(5, 13, Decision.STAY)
                .put(6, 13, Decision.STAY)
                .put(7, 13, Decision.HIT)
                .put(8, 13, Decision.HIT)
                .put(9, 13, Decision.HIT)
                .put(10, 13, Decision.HIT)
                .put(11, 13, Decision.HIT)
                .put(2, 14, Decision.STAY)
                .put(3, 14, Decision.STAY)
                .put(4, 14, Decision.STAY)
                .put(5, 14, Decision.STAY)
                .put(6, 14, Decision.STAY)
                .put(7, 14, Decision.HIT)
                .put(8, 14, Decision.HIT)
                .put(9, 14, Decision.HIT)
                .put(10, 14, Decision.HIT)
                .put(11, 14, Decision.HIT)
                .put(2, 15, Decision.STAY)
                .put(3, 15, Decision.STAY)
                .put(4, 15, Decision.STAY)
                .put(5, 15, Decision.STAY)
                .put(6, 15, Decision.STAY)
                .put(7, 15, Decision.HIT)
                .put(8, 15, Decision.HIT)
                .put(9, 15, Decision.HIT)
                .put(10, 15, Decision.HIT)
                .put(11, 15, Decision.HIT)
                .put(2, 16, Decision.STAY)
                .put(3, 16, Decision.STAY)
                .put(4, 16, Decision.STAY)
                .put(5, 16, Decision.STAY)
                .put(6, 16, Decision.STAY)
                .put(7, 16, Decision.HIT)
                .put(8, 16, Decision.HIT)
                .put(9, 16, Decision.HIT)
                .put(10, 16, Decision.HIT)
                .put(11, 16, Decision.HIT)
                .put(2, 17, Decision.STAY)
                .put(3, 17, Decision.STAY)
                .put(4, 17, Decision.STAY)
                .put(5, 17, Decision.STAY)
                .put(6, 17, Decision.STAY)
                .put(7, 17, Decision.STAY)
                .put(8, 17, Decision.STAY)
                .put(9, 17, Decision.STAY)
                .put(10, 17, Decision.STAY)
                .put(11, 17, Decision.STAY)
                .put(2, 18, Decision.STAY)
                .put(3, 18, Decision.STAY)
                .put(4, 18, Decision.STAY)
                .put(5, 18, Decision.STAY)
                .put(6, 18, Decision.STAY)
                .put(7, 18, Decision.STAY)
                .put(8, 18, Decision.STAY)
                .put(9, 18, Decision.STAY)
                .put(10, 18, Decision.STAY)
                .put(11, 18, Decision.STAY)
                .put(2, 19, Decision.STAY)
                .put(3, 19, Decision.STAY)
                .put(4, 19, Decision.STAY)
                .put(5, 19, Decision.STAY)
                .put(6, 19, Decision.STAY)
                .put(7, 19, Decision.STAY)
                .put(8, 19, Decision.STAY)
                .put(9, 19, Decision.STAY)
                .put(10, 19, Decision.STAY)
                .put(11, 19, Decision.STAY)
                .put(2, 20, Decision.STAY)
                .put(3, 20, Decision.STAY)
                .put(4, 20, Decision.STAY)
                .put(5, 20, Decision.STAY)
                .put(6, 20, Decision.STAY)
                .put(7, 20, Decision.STAY)
                .put(8, 20, Decision.STAY)
                .put(9, 20, Decision.STAY)
                .put(10, 20, Decision.STAY)
                .put(11, 20, Decision.STAY)
                .put(2, 21, Decision.STAY)
                .put(3, 21, Decision.STAY)
                .put(4, 21, Decision.STAY)
                .put(5, 21, Decision.STAY)
                .put(6, 21, Decision.STAY)
                .put(7, 21, Decision.STAY)
                .put(8, 21, Decision.STAY)
                .put(9, 21, Decision.STAY)
                .put(10, 21, Decision.STAY)
                .put(11, 21, Decision.STAY)
                .build();

        // dealer visible score, player score, optimal decision
        softTable = new ImmutableTable.Builder<Integer, Integer, Decision>()
                .put(2, 13, Decision.HIT)
                .put(3, 13, Decision.HIT)
                .put(4, 13, Decision.HIT)
                .put(5, 13, Decision.H_DOUBLE)
                .put(6, 13, Decision.H_DOUBLE)
                .put(7, 13, Decision.HIT)
                .put(8, 13, Decision.HIT)
                .put(9, 13, Decision.HIT)
                .put(10, 13, Decision.HIT)
                .put(11, 13, Decision.HIT)
                .put(2, 14, Decision.HIT)
                .put(3, 14, Decision.HIT)
                .put(4, 14, Decision.HIT)
                .put(5, 14, Decision.H_DOUBLE)
                .put(6, 14, Decision.H_DOUBLE)
                .put(7, 14, Decision.HIT)
                .put(8, 14, Decision.HIT)
                .put(9, 14, Decision.HIT)
                .put(10, 14, Decision.HIT)
                .put(11, 14, Decision.HIT)
                .put(2, 15, Decision.HIT)
                .put(3, 15, Decision.HIT)
                .put(4, 15, Decision.H_DOUBLE)
                .put(5, 15, Decision.H_DOUBLE)
                .put(6, 15, Decision.H_DOUBLE)
                .put(7, 15, Decision.HIT)
                .put(8, 15, Decision.HIT)
                .put(9, 15, Decision.HIT)
                .put(10, 15, Decision.HIT)
                .put(11, 15, Decision.HIT)
                .put(2, 16, Decision.HIT)
                .put(3, 16, Decision.HIT)
                .put(4, 16, Decision.H_DOUBLE)
                .put(5, 16, Decision.H_DOUBLE)
                .put(6, 16, Decision.H_DOUBLE)
                .put(7, 16, Decision.HIT)
                .put(8, 16, Decision.HIT)
                .put(9, 16, Decision.HIT)
                .put(10, 16, Decision.HIT)
                .put(11, 16, Decision.HIT)
                .put(2, 17, Decision.HIT)
                .put(3, 17, Decision.H_DOUBLE)
                .put(4, 17, Decision.H_DOUBLE)
                .put(5, 17, Decision.H_DOUBLE)
                .put(6, 17, Decision.H_DOUBLE)
                .put(7, 17, Decision.HIT)
                .put(8, 17, Decision.HIT)
                .put(9, 17, Decision.HIT)
                .put(10, 17, Decision.HIT)
                .put(11, 17, Decision.HIT)
                .put(2, 18, Decision.STAY)
                .put(3, 18, Decision.S_DOUBLE)
                .put(4, 18, Decision.S_DOUBLE)
                .put(5, 18, Decision.S_DOUBLE)
                .put(6, 18, Decision.S_DOUBLE)
                .put(7, 18, Decision.STAY)
                .put(8, 18, Decision.STAY)
                .put(9, 18, Decision.HIT)
                .put(10, 18, Decision.HIT)
                .put(11, 18, Decision.HIT)
                .put(2, 19, Decision.STAY)
                .put(3, 19, Decision.STAY)
                .put(4, 19, Decision.STAY)
                .put(5, 19, Decision.STAY)
                .put(6, 19, Decision.STAY)
                .put(7, 19, Decision.STAY)
                .put(8, 19, Decision.STAY)
                .put(9, 19, Decision.STAY)
                .put(10, 19, Decision.STAY)
                .put(11, 19, Decision.STAY)
                .put(2, 20, Decision.STAY)
                .put(3, 20, Decision.STAY)
                .put(4, 20, Decision.STAY)
                .put(5, 20, Decision.STAY)
                .put(6, 20, Decision.STAY)
                .put(7, 20, Decision.STAY)
                .put(8, 20, Decision.STAY)
                .put(9, 20, Decision.STAY)
                .put(10, 20, Decision.STAY)
                .put(11, 20, Decision.STAY)
                .put(2, 21, Decision.STAY)
                .put(3, 21, Decision.STAY)
                .put(4, 21, Decision.STAY)
                .put(5, 21, Decision.STAY)
                .put(6, 21, Decision.STAY)
                .put(7, 21, Decision.STAY)
                .put(8, 21, Decision.STAY)
                .put(9, 21, Decision.STAY)
                .put(10, 21, Decision.STAY)
                .put(11, 21, Decision.STAY)
                .build();

        // dealer visible score, value of one card in player's hand, optimal decision
        splitTable = new ImmutableTable.Builder<Integer, Integer, Decision>()
                .put(2, 2, Decision.SPLIT)
                .put(3, 2, Decision.SPLIT)
                .put(4, 2, Decision.SPLIT)
                .put(5, 2, Decision.SPLIT)
                .put(6, 2, Decision.SPLIT)
                .put(7, 2, Decision.SPLIT)
                .put(8, 2, Decision.HIT)
                .put(9, 2, Decision.HIT)
                .put(10, 2, Decision.HIT)
                .put(11, 2, Decision.HIT)
                .put(2, 3, Decision.SPLIT)
                .put(3, 3, Decision.SPLIT)
                .put(4, 3, Decision.SPLIT)
                .put(5, 3, Decision.SPLIT)
                .put(6, 3, Decision.SPLIT)
                .put(7, 3, Decision.SPLIT)
                .put(8, 3, Decision.HIT)
                .put(9, 3, Decision.HIT)
                .put(10, 3, Decision.HIT)
                .put(11, 3, Decision.HIT)
                .put(2, 4, Decision.HIT)
                .put(3, 4, Decision.HIT)
                .put(4, 4, Decision.HIT)
                .put(5, 4, Decision.SPLIT)
                .put(6, 4, Decision.SPLIT)
                .put(7, 4, Decision.HIT)
                .put(8, 4, Decision.HIT)
                .put(9, 4, Decision.HIT)
                .put(10, 4, Decision.HIT)
                .put(11, 4, Decision.HIT)
                .put(2, 5, Decision.SPLIT)
                .put(3, 5, Decision.SPLIT)
                .put(4, 5, Decision.SPLIT)
                .put(5, 5, Decision.SPLIT)
                .put(6, 5, Decision.SPLIT)
                .put(7, 5, Decision.HIT)
                .put(8, 5, Decision.HIT)
                .put(9, 5, Decision.HIT)
                .put(10, 5, Decision.HIT)
                .put(11, 5, Decision.HIT)
                .put(2, 6, Decision.SPLIT)
                .put(3, 6, Decision.SPLIT)
                .put(4, 6, Decision.SPLIT)
                .put(5, 6, Decision.SPLIT)
                .put(6, 6, Decision.SPLIT)
                .put(7, 6, Decision.SPLIT)
                .put(8, 6, Decision.HIT)
                .put(9, 6, Decision.HIT)
                .put(10, 6, Decision.HIT)
                .put(11, 6, Decision.HIT)
                .put(2, 7, Decision.SPLIT)
                .put(3, 7, Decision.SPLIT)
                .put(4, 7, Decision.SPLIT)
                .put(5, 7, Decision.SPLIT)
                .put(6, 7, Decision.SPLIT)
                .put(7, 7, Decision.SPLIT)
                .put(8, 7, Decision.HIT)
                .put(9, 7, Decision.HIT)
                .put(10, 7, Decision.HIT)
                .put(11, 7, Decision.HIT)
                .put(2, 8, Decision.SPLIT)
                .put(3, 8, Decision.SPLIT)
                .put(4, 8, Decision.SPLIT)
                .put(5, 8, Decision.SPLIT)
                .put(6, 8, Decision.SPLIT)
                .put(7, 8, Decision.SPLIT)
                .put(8, 8, Decision.SPLIT)
                .put(9, 8, Decision.SPLIT)
                .put(10, 8, Decision.SPLIT)
                .put(11, 8, Decision.SPLIT)
                .put(2, 9, Decision.SPLIT)
                .put(3, 9, Decision.SPLIT)
                .put(4, 9, Decision.SPLIT)
                .put(5, 9, Decision.SPLIT)
                .put(6, 9, Decision.SPLIT)
                .put(7, 9, Decision.STAY)
                .put(8, 9, Decision.SPLIT)
                .put(9, 9, Decision.SPLIT)
                .put(10, 9, Decision.STAY)
                .put(11, 9, Decision.STAY)
                .put(2, 10, Decision.STAY)
                .put(3, 10, Decision.STAY)
                .put(4, 10, Decision.STAY)
                .put(5, 10, Decision.STAY)
                .put(6, 10, Decision.STAY)
                .put(7, 10, Decision.STAY)
                .put(8, 10, Decision.STAY)
                .put(9, 10, Decision.STAY)
                .put(10, 10, Decision.STAY)
                .put(11, 10, Decision.STAY)
                .put(2, 1, Decision.SPLIT)
                .put(3, 1, Decision.SPLIT)
                .put(4, 1, Decision.SPLIT)
                .put(5, 1, Decision.SPLIT)
                .put(6, 1, Decision.SPLIT)
                .put(7, 1, Decision.SPLIT)
                .put(8, 1, Decision.SPLIT)
                .put(9, 1, Decision.SPLIT)
                .put(10, 1, Decision.SPLIT)
                .put(11, 1, Decision.SPLIT)
                .build();
    }

    public Decision getDecision(Hand playerHand, int dealerScore) {
        if (playerHand.isSplittable()) {
            return splitTable.get(dealerScore, playerHand.get(0).value());
        } else if (isSoft(playerHand)) {
            return softTable.get(dealerScore, playerHand.score());
        } else {
            return hardTable.get(dealerScore, playerHand.score());
        }
    }

    private boolean isSoft(Hand hand) {
        boolean hasAce = false;
        for (Card card : hand.cards()) {
            if (card.rank() == Card.Rank.ACE) {
                hasAce = true;
                break;
            }
        }
        if (!hasAce) {
            return false;
        }

        int lowerScore = 0;
        for (Card card : hand.cards()) {
            lowerScore += card.value();
        }
        return lowerScore <= 11;
    }

    enum Decision {
        HIT, STAY, H_DOUBLE, S_DOUBLE, SPLIT
    }
}
